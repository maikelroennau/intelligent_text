/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intelligenttext;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Maikel Maciel Rönnau
 */
public class Main extends javax.swing.JFrame {

    private int words = 0;
    private final int MINIMUM_WORDS = 200;
    private String articles[];

    /**
     * Creates new form Main
     */
    public Main() {
        selecionarLookAndFeel();
        setExtendedState(MAXIMIZED_BOTH);
        initComponents();
    }

    public void setArticles(String[] articles) {
        this.articles = articles;
    }
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 05/01/2015
     */
    private void selecionarLookAndFeel() {

        /**
         * * Selecionando Look & Feel ****************************************
         */
        try {

            //Selecionando Look & Feel:
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {

            JOptionPane.showMessageDialog(
                    this,
                    "Erro ao inicializar interface. Procure o administrador do sistema "
                    + "para resolver este problema.",
                    "Erro",
                    JOptionPane.ERROR);
            //Fim da mensagem de erro.
        }//Fecha catch.

        /**
         * * Fim da seleção do Look & Feel ***********************************
         */
    }//Fecha método selecionarLookAndFeel.

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        articlesList = new javax.swing.JList<>();
        labelInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Intelligent Text");
        setName("Intelligent Text"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));

        btnButton.setText("Search");
        btnButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnButtonMouseReleased(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setTabSize(4);
        textArea.setWrapStyleWord(true);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        articlesList.setFont(new java.awt.Font("Ubuntu", 0, 10)); // NOI18N
        articlesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                articlesListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(articlesList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnButton)
                    .addComponent(labelInfo))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnButtonMouseReleased
        search();
    }//GEN-LAST:event_btnButtonMouseReleased

    private void textAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyReleased
        if (evt.getKeyCode() == 32) {
            if (getText().split(" ").length > MINIMUM_WORDS && getText().split(" ").length % 50 == 0) {
                search();
            }
        }
    }//GEN-LAST:event_textAreaKeyReleased

    private void articlesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_articlesListMouseClicked
        if (evt.getClickCount() == 2) {
            int index = this.articlesList.getSelectedIndex();
            
            String url = getItemUrl(index);
            openLink(url);
        }
    }//GEN-LAST:event_articlesListMouseClicked

    private String getText() {
        String interfaceText = this.textArea.getText();

        if (interfaceText.isEmpty()) {
            this.labelInfo.setText("It is necessary to write a text to find articles.");
            return "";
        }

        if (interfaceText.split(" ").length < MINIMUM_WORDS) {
            this.labelInfo.setText("The text is too small to look for articles.");
            return "";
        }

        return interfaceText;
    }

    private String[] getArticles(String text) {

        String articles[] = null;

        try {

            Runtime searchEngine = Runtime.getRuntime();

            String command[] = {"search_engine/search_engine.exe", text};
            Process searchProcess = searchEngine.exec(command);

            BufferedReader resultOutput = new BufferedReader(new InputStreamReader(searchProcess.getInputStream()));

            articles = resultOutput.readLine().split(";");
        } catch (IOException | NullPointerException ex) {
            this.labelInfo.setText("No articles found.");
        }

        return articles;
    }

    private void search() {
        new Thread(new Runnable() {
            @Override
            public void run() {

                String text = getText();

                if (text.length() != 0) {

                    labelInfo.setText("Searching articles...");

                    String title = "Title";
                    String year = "Year";
                    String url = "URL";

                    String articles[] = getArticles(text);
                    
                    if (articles == null) {
                        System.out.println("No articles found.");
                        return;
                    }
                    
                    setArticles(articles);
                    ArrayList<String> formatedArticles = new ArrayList<>();

                    for (String article : articles) {
                        try {
                            String articlesItens[] = article.split(",");

                            articlesItens[0] = "<html><b>" + articlesItens[0] + "</b><br>";
                            articlesItens[1] = " " + articlesItens[1] + " - ";
                            articlesItens[2] = "<a href=\"" + articlesItens[2] + "\">Open article on browser</a></html>";

                            formatedArticles.add(articlesItens[0] + articlesItens[1] + articlesItens[2]);
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                        }
                    }

                    if (formatedArticles.isEmpty()) {
                        labelInfo.setText("No articles found.");
                    } else {
                        labelInfo.setText(formatedArticles.size() + " articles found.");

                        articles = new String[formatedArticles.size()];

                        for (int i = 0; i < formatedArticles.size(); i++) {
                            articles[i] = formatedArticles.get(i);
                        }

                        articlesList.setListData(articles);
                    }
                }
            }
        }).start();
    }
    
    public String getItemUrl(int index) {
        String article[] = this.articles[index].split(",");
        
        return article[2];
    }
    
    public void openLink(String link) {
        try {
            Desktop.getDesktop().browse(new URI(link));
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.OFF, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> articlesList;
    private javax.swing.JButton btnButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
